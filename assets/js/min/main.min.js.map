{"version":3,"sources":["main.js"],"names":["VideomailClient","require","DEBUG","VideomailFieldController","Marionette","Object","extend","videomailClient","initialize","Backbone","Radio","this","listenTo","channel","registerVideomailField","fieldModel","formID","get","loadVideomailClient","reply","validateRequired","validateVideomail","maybeSubmit","getSubmitData","siteName","video","limitSeconds","width","countdown","audio","enabled","selectors","submitButtonSelector","enableAutoValidation","verbose","on","events","PREVIEW","key","console","log","set","request","GOING_BACK","SUBMITTED","videomail","formModel","nfRadio","show","el","valid","getExtra","submit","fieldData","value","url","webm","mp4","poster","alias","onBeforeDestroy","unload","jQuery","document","ready"],"mappings":"AAAA,GAAIA,iBAAkBC,QAAQ,oBAG1BC,OAAQ,EAKRC,yBAA2BC,WAAWC,OAAOC,QAE7CC,gBAAoB,KAEpBC,WAAY,WACRC,SAASC,MAAMR,MAAQA,MAGvBS,KAAKC,SAAUH,SAASC,MAAMG,QAAS,aAAe,aAAcF,KAAKG,yBAG7EA,uBAAwB,SAAUC,GAE9B,GAAIC,GAASD,EAAWE,IAAK,SAE7BN,MAAKO,oBAAqBH,GAG1BN,SAASC,MAAMG,QAAS,aAAmBM,MAAO,oBAAsBR,KAAKS,iBAAmBT,MAChGF,SAASC,MAAMG,QAAS,aAAmBM,MAAO,qBAAsBR,KAAKU,kBAAmBV,MAGhGF,SAASC,MAAMG,QAAS,QAAUG,GAASG,MAAO,eAAsBR,KAAKW,YAAmBX,KAAMI,GAGtGN,SAASC,MAAMG,QAAS,aAAmBM,MAAO,iBAAsBR,KAAKY,cAAmBZ,OASpGO,oBAAqB,SAAUH,GAC3BJ,KAAKJ,gBAAkB,GAAIP,kBACvBwB,SAAUT,EAAWE,IAAK,aAC1BQ,OACIC,aAAgBX,EAAWE,IAAK,kBAAqB,GACrDU,MAAgBZ,EAAWE,IAAK,UAAa,IAC7CW,UAAgBb,EAAWE,IAAK,eAAiB,GAErDY,OACIC,QAASf,EAAWE,IAAK,mBAAqB,GAElDc,WACIC,qBAAsB,0CAQ1BC,sBAAsB,EAEtBC,QAASnB,EAAWE,IAAK,YAAef,QAI5CS,KAAKJ,gBAAgB4B,GAAIxB,KAAKJ,gBAAgB6B,OAAOC,QAAS,SAAUC,GACpEC,QAAQC,IAAK,sBACbD,QAAQC,IAAKF,GACbvB,EAAW0B,IAAK,gBAAiBH,GACjC7B,SAASC,MAAMG,QAAQ,UAAU6B,QAAS,eAAgB3B,EAAWE,IAAI,MAAO,oBAIpFN,KAAKJ,gBAAgB4B,GAAIxB,KAAKJ,gBAAgB6B,OAAOO,WAAW,WAC5DJ,QAAQC,IAAK,2BAGjB7B,KAAKJ,gBAAgB4B,GAAIxB,KAAKJ,gBAAgB6B,OAAOQ,UAAW,SAAUC,GACtEN,QAAQC,IAAK,wBACbD,QAAQC,IAAKK,GACbN,QAAQC,IAAKzB,EAEb,IAAIC,GAASD,EAAWE,IAAK,UACzB6B,EAAYC,QAAQlC,QAAS,OAAQ6B,QAAS,WAAY1B,EAG9D+B,SAAQlC,QAAS,QAAUiC,EAAU7B,IAAK,OAASyB,QAAS,YAAa,qBAAsBG,GAC/FE,QAAQlC,QAAS,QAAUG,GAAS0B,QAAS,SAAUI,KAG3DnC,KAAKJ,gBAAgByC,QASzB5B,iBAAkB,SAAU6B,EAAIlC,GAC5B,GAAImC,GAAQvC,KAAKU,kBAAmBN,EAYpC,OATKmC,IACDzC,SAASC,MAAMG,QAAQ,UAAU6B,QAC7B,YACA3B,EAAWE,IAAI,MACf,iBACA,oDAIDiC,GAUX7B,kBAAmB,SAAUN,GACzB,MAAOA,GAAWE,IAAK,mBAAqB,GAUhDK,YAAa,SAASwB,GAClB,QAAOA,EAAUK,SAAU,wBACvBxC,KAAKJ,gBAAgB6C,UACd,IAaf7B,cAAe,SAAS8B,EAAWtC,GAS/B,MARAsC,GAAUf,IAAYvB,EAAWE,IAAI,iBACrCoC,EAAUC,MAAYvC,EAAWE,IAAI,iBACrCoC,EAAUE,IAAYxC,EAAWE,IAAI,iBACrCoC,EAAUG,KAAYzC,EAAWE,IAAI,kBACrCoC,EAAUI,IAAY1C,EAAWE,IAAI,iBACrCoC,EAAUK,OAAY3C,EAAWE,IAAI,oBACrCoC,EAAUM,MAAY5C,EAAWE,IAAI,mBAE9BoC,GAwBXO,gBAAiB,WACbjD,KAAKJ,gBAAgBsD,WAI7BC,QAAOC,UAAUC,MAAM,WACnB,GAAI7D","file":"main.min.js","sourcesContent":["var VideomailClient = require('videomail-client')\n\n// manual switch to have more stuff printed to console\nvar DEBUG = false;\n\n// good documentation on backbone event handling\n// http://backbonejs.org/#Events\n\nvar VideomailFieldController = Marionette.Object.extend({\n\n    videomailClient:    null,\n\n    initialize: function() {\n        Backbone.Radio.DEBUG = DEBUG;\n\n        // Listen to Videomail fieldModel `init`, before setting up Videomail-Client.\n        this.listenTo( Backbone.Radio.channel( 'videomail' ), 'init:model', this.registerVideomailField );\n    },\n\n    registerVideomailField: function( fieldModel ){\n\n        var formID = fieldModel.get( 'formID' );\n\n        this.loadVideomailClient( fieldModel );\n\n        // Custom field validation, since we aren't using a standard `value`.\n        Backbone.Radio.channel( 'videomail'      ).reply( 'validate:required',  this.validateRequired,  this             );\n        Backbone.Radio.channel( 'videomail'      ).reply( 'validate:modelData', this.validateVideomail, this             );\n\n        // Pause submission so that we can POST to the Videomail server.\n        Backbone.Radio.channel( 'form-' + formID ).reply( 'maybe:submit',       this.maybeSubmit,       this, fieldModel );\n\n        // Append additional field data to the submission. By default, only `value` is sent.\n        Backbone.Radio.channel( 'videomail'      ).reply( 'get:submitData',     this.getSubmitData,     this             );\n    },\n\n    /*\n     * Load Videomail Client\n     * Use the fieldModel's settings to init the Videomail Client.\n     *\n     * @param fieldModel\n     */\n    loadVideomailClient: function( fieldModel ) {\n        this.videomailClient = new VideomailClient({\n            siteName: fieldModel.get( 'site_name' ),\n            video: {\n                limitSeconds:   fieldModel.get( 'limit_seconds' ) || 80,\n                width:          fieldModel.get( 'width' ) || 320,\n                countdown:      fieldModel.get( 'countdown' ) || false,\n            },\n            audio: {\n                enabled: fieldModel.get( 'audio_enabled' ) || false,\n            },\n            selectors: {\n                submitButtonSelector: '.submit-container input[type=\"button\"]'\n            },\n            // callbacks: {\n            //     adjustFormDataBeforePosting:\n            //     // ugly name eh?\n            //     this.adjustFormDataBeforePostingToVideomailServer.bind(this)\n            // },\n            // leave it to ninja form to validate the inputs\n            enableAutoValidation: false,\n            // log actions/events to console\n            verbose: fieldModel.get( 'verbose' ) || DEBUG\n        });\n\n        // needed to get the videomail key which is required before submission\n        this.videomailClient.on( this.videomailClient.events.PREVIEW, function( key ){\n            console.log( 'VIDEOMAIL: PREVIEW' );\n            console.log( key );\n            fieldModel.set( 'videomail-key', key );\n            Backbone.Radio.channel('fields').request( 'remove:error', fieldModel.get('id'), 'required-error' ); // Clear any previous errors.\n        });\n\n        // needed to invalidate form\n        this.videomailClient.on( this.videomailClient.events.GOING_BACK,function(){\n            console.log( 'VIDEOMAIL: GOING BACK' );\n        });\n\n        this.videomailClient.on( this.videomailClient.events.SUBMITTED, function( videomail ){\n            console.log( 'VIDEOMAIL: SUBMITTED' );\n            console.log( videomail );\n            console.log( fieldModel );\n            // Restart Submission\n            var formID = fieldModel.get( 'formID' );\n            var formModel = nfRadio.channel( 'app' ).request( 'get:form', formID );\n            \n            // set a temporary videomail indicating that it has been submitted successfully\n            nfRadio.channel( 'form-' + formModel.get( 'id' ) ).request( 'add:extra', 'generatedVideomail', videomail );\n            nfRadio.channel( 'form-' + formID ).request( 'submit', formModel );\n        });\n\n        this.videomailClient.show()\n    },\n\n    /*\n     * Validate Requried\n     *\n     * @channel videomail fieldType\n     * @request validate:required\n     */\n    validateRequired: function( el, fieldModel ) {\n        var valid = this.validateVideomail( fieldModel );\n\n        // override default behaviour so that we can set our own error text here\n        if (!valid) {\n            Backbone.Radio.channel('fields').request(\n                'add:error',\n                fieldModel.get('id'),\n                'required-error',\n                \"Record and click on stop to see a preview video.\"\n            )\n        }\n\n        return valid\n    },\n\n    /*\n     * Validate Videomail\n     *\n     * @channel videomail fieldType\n     * @request validate:modelData\n     * @param   fieldModel\n     */\n    validateVideomail: function( fieldModel ) {\n        return fieldModel.get( 'videomail-key' ) || false;\n    },\n\n    /*\n     * Maybe Submit\n     *\n     * @channel form-{formID}\n     * @request maybe:submit\n     * @param   formModel\n     */\n    maybeSubmit: function(formModel) {\n        if ( ! formModel.getExtra( 'generatedVideomail' ) ) {\n            this.videomailClient.submit();\n            return false;\n        }\n        return true;\n    },\n\n    /*\n     * Maybe Submit\n     *\n     * @channel videomail fieldType\n     * @request get:submitData\n     * @param   fieldData\n     * @param   fieldModel\n     */\n    getSubmitData: function(fieldData, fieldModel) {\n        fieldData.key       = fieldModel.get('videomail-key')\n        fieldData.value     = fieldModel.get('videomail-url')\n        fieldData.url       = fieldModel.get('videomail-url')\n        fieldData.webm      = fieldModel.get('videomail-webm')\n        fieldData.mp4       = fieldModel.get('videomail-mp4')\n        fieldData.poster    = fieldModel.get('videomail-poster')\n        fieldData.alias     = fieldModel.get('videomail-alias')\n\n        return fieldData\n    },\n\n    // Removed for testing. -KBJ\n    // videomailSubmitted: function(videomail) {\n    //     // pass on some videomail attributes to the field model\n    //     this.fieldModel.set('value', videomail.url)\n    //     this.fieldModel.set('videomail-url', videomail.url)\n    //     this.fieldModel.set('videomail-webm', videomail.webm)\n    //     this.fieldModel.set('videomail-mp4', videomail.mp4)\n    //     this.fieldModel.set('videomail-poster', videomail.poster)\n    //     this.fieldModel.set('videomail-alias', videomail.alias)\n    //     this.fieldModel.set('videomail-key', videomail.key)\n    //\n    //     var formID = this.getFormID()\n    //\n    //     // set re-videomail_submitted flag so that we can continue\n    //     // with the normal ninja form submission\n    //     `Backbone.Radio.channel(formID).request('add:extra', 'generatedVideomail', true)`\n    //\n    //     // re-start submission\n    //     Backbone.Radio.channel(formID).request('submit', this.formModel)\n    // },\n\n    onBeforeDestroy: function() {\n        this.videomailClient.unload()\n    }\n});\n\njQuery(document).ready(function() {\n    new VideomailFieldController();\n});\n"]}