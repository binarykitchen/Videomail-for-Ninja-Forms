{"version":3,"sources":["main.js"],"names":["VideomailClient","require","DEBUG","VideomailFieldController","Marionette","Object","extend","videomailClient","fieldModel","formModel","initialize","Backbone","Radio","submitChannel","channel","videomailChannel","this","listenTo","registerFieldModel","registerSubmitModel","reply","getSubmitData","validateRequired","hasVideomail","videomailFieldModel","videomailClientLoaded","submitFieldModel","formID","get","submitButtonId","formChannel","loadVideomailClient","maybeSubmit","valid","request","proceed","getExtra","submit","getOption","name","defaultOption","options","siteName","video","limitSeconds","width","countdown","selectors","audio","enabled","callbacks","adjustFormDataBeforePosting","adjustFormDataBeforePostingToVideomailServer","bind","enableAutoValidation","verbose","on","events","PREVIEW","setVideomailKey","GOING_BACK","removeVideomailKey","SUBMITTED","videomailSubmitted","show","key","set","getFormID","videomailKey","getFieldValueByKey","field","getVideomailValue","fieldKey","fieldValue","rawValue","replace","videomail","cb","from","to","subject","body","url","webm","mp4","poster","alias","fieldData","value","onBeforeDestroy","unload","jQuery","document","ready"],"mappings":"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","file":"main.min.js","sourcesContent":["var VideomailClient = require('videomail-client')\n\n// manual switch to have more stuff printed to console\nvar DEBUG = true\n\n// good documentation on backbone event handling\n// http://backbonejs.org/#Events\n\nvar VideomailFieldController = Marionette.Object.extend({\n\n    videomailClient:    null,\n    fieldModel:         null,\n    formModel:          null,\n\n    initialize: function() {\n        Backbone.Radio.DEBUG = DEBUG\n\n        // TODO do not load anything, nor do any event handling\n        // when no fields are of type videomail\n        // easy to reproduce: create a default contact form without\n        // videomail and it's still loaded ...\n        // see https://github.com/wpninjas/ninja-forms-videomail/issues/29\n\n        var submitChannel    = Backbone.Radio.channel('submit')\n        var videomailChannel = Backbone.Radio.channel('videomail')\n\n        // Backbone Radio Listeners\n        // see https://github.com/marionettejs/backbone.radio\n\n        this.listenTo(\n            videomailChannel,\n            'init:model',\n            this.registerFieldModel\n        )\n\n        this.listenTo(\n            submitChannel,\n            'init:model',\n            this.registerSubmitModel\n        )\n\n        // Radio Responses, see http://developer.ninjaforms.com/codex/field-submission-data/\n        videomailChannel.reply('get:submitData',     this.getSubmitData, this)\n        videomailChannel.reply('validate:required',  this.validateRequired, this)\n\n        // needed to validate when submitting\n        videomailChannel.reply('validate:modelData', this.hasVideomail, this)\n    },\n\n    // is called every time a ‘videomail’ field is initialized\n    // but since we only have one instance per form, it is okay to do it like that for\n    // todo add new ninja form configuration to limit instances to 1\n    registerFieldModel: function(videomailFieldModel) {\n        this.fieldModel = videomailFieldModel\n    },\n\n    videomailClientLoaded: function() {\n        return !!this.videomailClient\n    },\n\n    // called when submit button has been laid out internally\n    registerSubmitModel: function(submitFieldModel) {\n\n        // precaution: proceed only when not initialised yet otherwise\n        // videomail client is loaded again after submission.\n        //\n        // can also be prevented in a form setting in the Advanced domain\n        // of the form builder, under Display Settings,\n        // that allows you to clear/hide the form after submission\n        if (!this.videomailClientLoaded()) {\n\n            var formID         = \"form-\" + submitFieldModel.get('formID')\n            var submitButtonId = \"nf-field-\" + submitFieldModel.get('id')\n            var formChannel    = Backbone.Radio.channel(formID)\n\n            this.loadVideomailClient({submitButtonId: submitButtonId})\n\n            formChannel.reply(\n                'maybe:submit',\n                this.maybeSubmit,\n                this,\n                formID\n            )\n        }\n    },\n\n    validateRequired: function() {\n        var valid = this.hasVideomail()\n\n        // override default behaviour so that we can set our own error text here\n        if (!valid) {\n            Backbone.Radio.channel('fields').request(\n                'add:error',\n                this.fieldModel.get('id'),\n                'required-error',\n                \"Record and click on stop to see a preview video.\"\n            )\n        }\n\n        return valid\n    },\n\n    // called when about to start a submission\n    // how to stop a submission? see:\n    // http://developer.ninjaforms.com/codex/startstop-submission/\n    maybeSubmit: function(formModel) {\n        // halt the normal ninja form submission by default\n        var proceed = false\n\n        // remember form model for some submission-related functions further below\n        this.formModel = formModel\n\n        if (this.formModel.getExtra('videomail_submitted')) {\n            // yes, videomail is on the videomail server, so\n            // proceed with the normal ninja form submission routine\n            proceed = true\n        } else {\n            // manually trigger the whole videomail submission\n            // we cant be using the submit button click event since it's too\n            // deep wrapped within backbone containers :(\n            this.videomailClient.submit()\n        }\n\n        return proceed\n    },\n\n    getOption: function(name, defaultOption) {\n        // todo the this.fieldModel check is temporary until\n        // https://github.com/wpninjas/ninja-forms-videomail/issues/29 is resolved\n        return this.fieldModel && this.fieldModel.get(name) || defaultOption\n    },\n\n    loadVideomailClient: function(options) {\n        this.videomailClient = new VideomailClient({\n            siteName: this.getOption('site_name'),\n            video: {\n                limitSeconds:   this.getOption('limit_seconds', 80),\n                width:          this.getOption('width', 320),\n                countdown:      this.getOption('countdown', false)\n            },\n            selectors: {\n                submitButtonId: options.submitButtonId\n            },\n            audio: {\n                enabled: this.getOption('audio_enabled', false)\n            },\n            callbacks: {\n                adjustFormDataBeforePosting:\n                // ugly name eh?\n                this.adjustFormDataBeforePostingToVideomailServer.bind(this)\n            },\n            // leave it to ninja form to validate the inputs\n            enableAutoValidation: false,\n            // log actions/events to console\n            verbose: this.getOption('verbose', DEBUG)\n        })\n\n        // needed to get the videomail key which is required before submission\n        this.videomailClient.on(\n            this.videomailClient.events.PREVIEW,\n            this.setVideomailKey.bind(this)\n        )\n\n        // needed to invalidate form\n        this.videomailClient.on(\n            this.videomailClient.events.GOING_BACK,\n            this.removeVideomailKey.bind(this)\n        )\n\n        this.videomailClient.on(\n            this.videomailClient.events.SUBMITTED,\n            this.videomailSubmitted.bind(this)\n        )\n\n        this.videomailClient.show()\n    },\n\n    setVideomailKey: function(key) {\n        this.fieldModel.set('videomail-key', key)\n\n        Backbone.Radio.channel('fields').request(\n            'remove:error',\n            this.fieldModel.get('id'),\n            'required-error'\n        )\n    },\n\n    removeVideomailKey: function() {\n        this.setVideomailKey(null)\n    },\n\n    getFormID: function() {\n        return 'form-' + this.formModel.get('id')\n    },\n\n    hasVideomail: function() {\n        var videomailKey = this.fieldModel.get('videomail-key')\n\n        return !!videomailKey\n    },\n\n    getFieldValueByKey: function(key) {\n        var field =\n            Backbone.Radio.channel(this.getFormID())\n                .request('get:fieldByKey', key)\n\n        if (field) {\n            return field.get('value')\n        } else {\n            // must have been a bad config from the user - in that case just do nothing\n            return null\n        }\n    },\n\n    getVideomailValue: function(fieldKey) {\n        var fieldValue = this.fieldModel.get(fieldKey)\n        var rawValue   = null\n\n        // it can happen that the user has configured something wrong,\n        // i.E. an empty email_from. in that case just ignore ...\n        if (fieldValue) {\n            // extract the key from the merge tag.\n            // todo: make it work for i.E. {system:admin_email} as well, see\n            // https://github.com/wpninjas/ninja-forms-videomail/issues/30\n            rawValue = fieldValue.replace('{field:', '').replace('}', '')\n\n            if (rawValue != fieldValue) {\n                // yes it was a merge tag, so resolve it again\n                rawValue = this.getFieldValueByKey(rawValue)\n            }\n        }\n\n        return rawValue\n    },\n\n    adjustFormDataBeforePostingToVideomailServer: function(videomail, cb) {\n        videomail.from    = this.getVideomailValue('email_from')\n        videomail.to      = this.getVideomailValue('email_to')\n        videomail.subject = this.getVideomailValue('email_subject')\n        videomail.body    = this.getVideomailValue('email_body')\n\n        cb(null, videomail)\n    },\n\n    videomailSubmitted: function(videomail) {\n        // pass on some videomail attributes to the field model\n        this.fieldModel.set('value', videomail.url)\n        this.fieldModel.set('videomail-url', videomail.url)\n        this.fieldModel.set('videomail-webm', videomail.webm)\n        this.fieldModel.set('videomail-mp4', videomail.mp4)\n        this.fieldModel.set('videomail-poster', videomail.poster)\n        this.fieldModel.set('videomail-alias', videomail.alias)\n        this.fieldModel.set('videomail-key', videomail.key)\n\n        var formID = this.getFormID()\n\n        // set re-videomail_submitted flag so that we can continue\n        // with the normal ninja form submission\n        Backbone.Radio.channel(formID).request('add:extra', 'videomail_submitted', true)\n\n        // re-start submission\n        Backbone.Radio.channel(formID).request('submit', this.formModel)\n    },\n\n    getSubmitData: function(fieldData, fieldModel) {\n        fieldData.key       = fieldModel.get('videomail-key')\n        fieldData.value     = fieldModel.get('videomail-url')\n        fieldData.url       = fieldModel.get('videomail-url')\n        fieldData.webm      = fieldModel.get('videomail-webm')\n        fieldData.mp4       = fieldModel.get('videomail-mp4')\n        fieldData.poster    = fieldModel.get('videomail-poster')\n        fieldData.alias     = fieldModel.get('videomail-alias')\n\n        return fieldData\n    },\n\n    onBeforeDestroy: function() {\n        this.videomailClient.unload()\n    }\n})\n\njQuery(document).ready(function() {\n    new VideomailFieldController()\n})\n"]}