{"version":3,"sources":["main.js"],"names":["VideomailClient","require","DEBUG","VideomailFieldController","Marionette","Object","extend","videomailClient","initialize","Backbone","Radio","this","listenTo","channel","registerVideomailField","fieldModel","formID","get","loadVideomailClient","reply","validateRequired","validateVideomail","maybeSubmit","getSubmitData","siteName","video","limitSeconds","width","countdown","audio","enabled","enableAutoValidation","verbose","on","events","PREVIEW","key","console","log","set","request","GOING_BACK","SUBMITTED","videomail","formModel","nfRadio","show","el","valid","getExtra","submit","fieldData","value","url","webm","mp4","poster","alias","onBeforeDestroy","unload","jQuery","document","ready"],"mappings":"AAAA,GAAIA,iBAAkBC,QAAQ,oBAG1BC,OAAQ,EAKRC,yBAA2BC,WAAWC,OAAOC,QAE7CC,gBAAoB,KAEpBC,WAAY,WACRC,SAASC,MAAMR,MAAQA,MAGvBS,KAAKC,SAAUH,SAASC,MAAMG,QAAS,aAAe,aAAcF,KAAKG,yBAG7EA,uBAAwB,SAAUC,GAE9B,GAAIC,GAASD,EAAWE,IAAK,SAE7BN,MAAKO,oBAAqBH,GAG1BN,SAASC,MAAMG,QAAS,aAAmBM,MAAO,oBAAsBR,KAAKS,iBAAmBT,MAChGF,SAASC,MAAMG,QAAS,aAAmBM,MAAO,qBAAsBR,KAAKU,kBAAmBV,MAGhGF,SAASC,MAAMG,QAAS,QAAUG,GAASG,MAAO,eAAsBR,KAAKW,YAAmBX,KAAMI,GAGtGN,SAASC,MAAMG,QAAS,aAAmBM,MAAO,iBAAsBR,KAAKY,cAAmBZ,OASpGO,oBAAqB,SAAUH,GAC3BJ,KAAKJ,gBAAkB,GAAIP,kBACvBwB,SAAUT,EAAWE,IAAK,aAC1BQ,OACIC,aAAgBX,EAAWE,IAAK,kBAAqB,GACrDU,MAAgBZ,EAAWE,IAAK,UAAa,IAC7CW,UAAgBb,EAAWE,IAAK,eAAiB,GAErDY,OACIC,QAASf,EAAWE,IAAK,mBAAqB,GAQlDc,sBAAsB,EAEtBC,QAASjB,EAAWE,IAAK,YAAef,QAI5CS,KAAKJ,gBAAgB0B,GAAItB,KAAKJ,gBAAgB2B,OAAOC,QAAS,SAAUC,GACpEC,QAAQC,IAAK,sBACbD,QAAQC,IAAKF,GACbrB,EAAWwB,IAAK,gBAAiBH,GACjC3B,SAASC,MAAMG,QAAQ,UAAU2B,QAAS,eAAgBzB,EAAWE,IAAI,MAAO,oBAIpFN,KAAKJ,gBAAgB0B,GAAItB,KAAKJ,gBAAgB2B,OAAOO,WAAW,WAC5DJ,QAAQC,IAAK,2BAGjB3B,KAAKJ,gBAAgB0B,GAAItB,KAAKJ,gBAAgB2B,OAAOQ,UAAW,SAAUC,GACtEN,QAAQC,IAAK,wBACbD,QAAQC,IAAKK,GACbN,QAAQC,IAAKvB,EAEb,IAAIC,GAASD,EAAWE,IAAK,UACzB2B,EAAYC,QAAQhC,QAAS,OAAQ2B,QAAS,WAAYxB,EAC9D6B,SAAQhC,QAAS,QAAUG,GAASwB,QAAS,SAAUI,KAG3DjC,KAAKJ,gBAAgBuC,QASzB1B,iBAAkB,SAAU2B,EAAIhC,GAC5B,GAAIiC,GAAQrC,KAAKU,kBAAmBN,EAYpC,OATKiC,IACDvC,SAASC,MAAMG,QAAQ,UAAU2B,QAC7B,YACAzB,EAAWE,IAAI,MACf,iBACA,oDAID+B,GAUX3B,kBAAmB,SAAUN,GACzB,MAAOA,GAAWE,IAAK,mBAAqB,GAUhDK,YAAa,SAASsB,GAClB,QAAOA,EAAUK,SAAU,yBACvBtC,KAAKJ,gBAAgB2C,UACd,IAaf3B,cAAe,SAAS4B,EAAWpC,GAS/B,MARAoC,GAAUf,IAAYrB,EAAWE,IAAI,iBACrCkC,EAAUC,MAAYrC,EAAWE,IAAI,iBACrCkC,EAAUE,IAAYtC,EAAWE,IAAI,iBACrCkC,EAAUG,KAAYvC,EAAWE,IAAI,kBACrCkC,EAAUI,IAAYxC,EAAWE,IAAI,iBACrCkC,EAAUK,OAAYzC,EAAWE,IAAI,oBACrCkC,EAAUM,MAAY1C,EAAWE,IAAI,mBAE9BkC,GAwBXO,gBAAiB,WACb/C,KAAKJ,gBAAgBoD,WAI7BC,QAAOC,UAAUC,MAAM,WACnB,GAAI3D","file":"main.min.js","sourcesContent":["var VideomailClient = require('videomail-client')\r\n\r\n// manual switch to have more stuff printed to console\r\nvar DEBUG = false;\r\n\r\n// good documentation on backbone event handling\r\n// http://backbonejs.org/#Events\r\n\r\nvar VideomailFieldController = Marionette.Object.extend({\r\n\r\n    videomailClient:    null,\r\n\r\n    initialize: function() {\r\n        Backbone.Radio.DEBUG = DEBUG;\r\n\r\n        // Listen to Videomail fieldModel `init`, before setting up Videomail-Client.\r\n        this.listenTo( Backbone.Radio.channel( 'videomail' ), 'init:model', this.registerVideomailField );\r\n    },\r\n\r\n    registerVideomailField: function( fieldModel ){\r\n\r\n        var formID = fieldModel.get( 'formID' );\r\n\r\n        this.loadVideomailClient( fieldModel );\r\n\r\n        // Custom field validation, since we aren't using a standard `value`.\r\n        Backbone.Radio.channel( 'videomail'      ).reply( 'validate:required',  this.validateRequired,  this             );\r\n        Backbone.Radio.channel( 'videomail'      ).reply( 'validate:modelData', this.validateVideomail, this             );\r\n\r\n        // Pause submission so that we can POST to the Videomail server.\r\n        Backbone.Radio.channel( 'form-' + formID ).reply( 'maybe:submit',       this.maybeSubmit,       this, fieldModel );\r\n\r\n        // Append additional field data to the submission. By default, only `value` is sent.\r\n        Backbone.Radio.channel( 'videomail'      ).reply( 'get:submitData',     this.getSubmitData,     this             );\r\n    },\r\n\r\n    /*\r\n     * Load Videomail Client\r\n     * Use the fieldModel's settings to init the Videomail Client.\r\n     *\r\n     * @param fieldModel\r\n     */\r\n    loadVideomailClient: function( fieldModel ) {\r\n        this.videomailClient = new VideomailClient({\r\n            siteName: fieldModel.get( 'site_name' ),\r\n            video: {\r\n                limitSeconds:   fieldModel.get( 'limit_seconds' ) || 80,\r\n                width:          fieldModel.get( 'width' ) || 320,\r\n                countdown:      fieldModel.get( 'countdown' ) || false,\r\n            },\r\n            audio: {\r\n                enabled: fieldModel.get( 'audio_enabled' ) || false,\r\n            },\r\n            // callbacks: {\r\n            //     adjustFormDataBeforePosting:\r\n            //     // ugly name eh?\r\n            //     this.adjustFormDataBeforePostingToVideomailServer.bind(this)\r\n            // },\r\n            // leave it to ninja form to validate the inputs\r\n            enableAutoValidation: false,\r\n            // log actions/events to console\r\n            verbose: fieldModel.get( 'verbose' ) || DEBUG\r\n        });\r\n\r\n        // needed to get the videomail key which is required before submission\r\n        this.videomailClient.on( this.videomailClient.events.PREVIEW, function( key ){\r\n            console.log( 'VIDEOMAIL: PREVIEW' );\r\n            console.log( key );\r\n            fieldModel.set( 'videomail-key', key );\r\n            Backbone.Radio.channel('fields').request( 'remove:error', fieldModel.get('id'), 'required-error' ); // Clear any previous errors.\r\n        });\r\n\r\n        // needed to invalidate form\r\n        this.videomailClient.on( this.videomailClient.events.GOING_BACK,function(){\r\n            console.log( 'VIDEOMAIL: GOING BACK' );\r\n        });\r\n\r\n        this.videomailClient.on( this.videomailClient.events.SUBMITTED, function( videomail ){\r\n            console.log( 'VIDEOMAIL: SUBMITTED' );\r\n            console.log( videomail );\r\n            console.log( fieldModel );\r\n            // Restart Submission\r\n            var formID = fieldModel.get( 'formID' );\r\n            var formModel = nfRadio.channel( 'app' ).request( 'get:form', formID );\r\n            nfRadio.channel( 'form-' + formID ).request( 'submit', formModel );\r\n        });\r\n\r\n        this.videomailClient.show()\r\n    },\r\n\r\n    /*\r\n     * Validate Requried\r\n     *\r\n     * @channel videomail fieldType\r\n     * @request validate:required\r\n     */\r\n    validateRequired: function( el, fieldModel ) {\r\n        var valid = this.validateVideomail( fieldModel );\r\n\r\n        // override default behaviour so that we can set our own error text here\r\n        if (!valid) {\r\n            Backbone.Radio.channel('fields').request(\r\n                'add:error',\r\n                fieldModel.get('id'),\r\n                'required-error',\r\n                \"Record and click on stop to see a preview video.\"\r\n            )\r\n        }\r\n\r\n        return valid\r\n    },\r\n\r\n    /*\r\n     * Validate Videomail\r\n     *\r\n     * @channel videomail fieldType\r\n     * @request validate:modelData\r\n     * @param   fieldModel\r\n     */\r\n    validateVideomail: function( fieldModel ) {\r\n        return fieldModel.get( 'videomail-key' ) || false;\r\n    },\r\n\r\n    /*\r\n     * Maybe Submit\r\n     *\r\n     * @channel form-{formID}\r\n     * @request maybe:submit\r\n     * @param   formModel\r\n     */\r\n    maybeSubmit: function(formModel) {\r\n        if ( ! formModel.getExtra( 'videomail_submitted' ) ) {\r\n            this.videomailClient.submit();\r\n            return false;\r\n        }\r\n        return true;\r\n    },\r\n\r\n    /*\r\n     * Maybe Submit\r\n     *\r\n     * @channel videomail fieldType\r\n     * @request get:submitData\r\n     * @param   fieldData\r\n     * @param   fieldModel\r\n     */\r\n    getSubmitData: function(fieldData, fieldModel) {\r\n        fieldData.key       = fieldModel.get('videomail-key')\r\n        fieldData.value     = fieldModel.get('videomail-url')\r\n        fieldData.url       = fieldModel.get('videomail-url')\r\n        fieldData.webm      = fieldModel.get('videomail-webm')\r\n        fieldData.mp4       = fieldModel.get('videomail-mp4')\r\n        fieldData.poster    = fieldModel.get('videomail-poster')\r\n        fieldData.alias     = fieldModel.get('videomail-alias')\r\n\r\n        return fieldData\r\n    },\r\n\r\n    // Removed for testing. -KBJ\r\n    // videomailSubmitted: function(videomail) {\r\n    //     // pass on some videomail attributes to the field model\r\n    //     this.fieldModel.set('value', videomail.url)\r\n    //     this.fieldModel.set('videomail-url', videomail.url)\r\n    //     this.fieldModel.set('videomail-webm', videomail.webm)\r\n    //     this.fieldModel.set('videomail-mp4', videomail.mp4)\r\n    //     this.fieldModel.set('videomail-poster', videomail.poster)\r\n    //     this.fieldModel.set('videomail-alias', videomail.alias)\r\n    //     this.fieldModel.set('videomail-key', videomail.key)\r\n    //\r\n    //     var formID = this.getFormID()\r\n    //\r\n    //     // set re-videomail_submitted flag so that we can continue\r\n    //     // with the normal ninja form submission\r\n    //     `Backbone.Radio.channel(formID).request('add:extra', 'videomail_submitted', true)`\r\n    //\r\n    //     // re-start submission\r\n    //     Backbone.Radio.channel(formID).request('submit', this.formModel)\r\n    // },\r\n\r\n    onBeforeDestroy: function() {\r\n        this.videomailClient.unload()\r\n    }\r\n});\r\n\r\njQuery(document).ready(function() {\r\n    new VideomailFieldController();\r\n});\r\n"]}